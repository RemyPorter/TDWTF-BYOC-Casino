Now the figurative penny drops.  Bit^WPaula must be higher up in the food chain than a mere code-monkey contractor like me.  How else could she have had advance knowledge of the comps system being introduced?

Come to think of it, if I wanted to set up a major money-laundering operation, the way the Lucky Deuce now works is pretty much the ideal way to do so.  The casino keeps their hands clean - aside from the small technicality of online gambling itself being illegal.  But anyone with a bunch of dirty money can gamble it away on the rigged-by-design games, turning it all into credits that are very liquid indeed - in more than one sense - while hiding among a bunch of other de-facto criminals who are genuinely here for the gambling.

Still, I need the money myself - and especially a hotel-stay voucher sounds mighty appealing right now - so I get stuck into the problem.

One of the Lucky Deuce's quirks is that every game (so far) is instantiated separately for each player - there are no shared tables as there would be in a normal casino.  The standard hustle of two players deliberately betting opposite each other, so that one of them is (nearly) guaranteed to win, therefore doesn't work here.  I'm going to have to get creative.

The ultra-configurable craps game is still stuck in integration - seems they weren't expecting the statistics of the custom games to be quite so different from the standard game, so they're still trying to work out how best to set up the betting.  Without knowing both the odds *and* the payouts, I can't design a hustle around it, even if I was willing to wait for it to be deployed.

Surprisingly, the "triple five" poker game *did* show up in the main repository, and is about to go live, complete with what looks like a half-decent AI.  But poker is a zero-sum game, with no house edge except how much better the AI is than the player - and it's the house edge that results in comps.  Besides, since the AI knows all of the cards just as much as I do, I really can't count on winning against it.  So that's out too.

The one-armed bandit is just as intractable for this problem as for outright cheating it.  The volatility index would be huge, thus earning lots of comps, but the actual money would run out in the end, and probably quite quickly.  Certainly the losses would outstrip the profit on comps.

Which leaves the roulette wheel that I rigged ... *how* long ago was it?  It's hard to remember when you've accidentally sat on a crate of rotten onions.  I didn't even know onions *could* go rotten.  And why is a posh coffee bar throwing out onions, anyway?

Roulette is a simple enough game that it's easy to work out a hustle for it.  The theoretical house edge on every bet (with one exception) is the same: 1/19.  And because it's rigged - both by design and by implementation - I can choose when to win, just like I used to do.  Only now I can be cleverer about it than just taking the outside bets and rolling a d20.  Of course, I'll have to read up on the inside bets, which are somewhat more intricate than the outside ones, but after dealing with craps it should be simplicity itself.

But first I need to set up Tor.  It'll look mighty strange if so many accounts log in from the same computer - one which isn't a Tor exit node, at any rate.  Tor exit nodes would be entirely normal for this sort of establishment.

...

My strategy is to deploy the accounts under my control in three groups: the winners, the losers and the high-rollers.  They all use the same code, with different parameters.  I assume that each account has a few dollars of "sign-up bonus" cash in it to begin with - this can't be withdrawn or transferred (that would be too easy), but it does greatly simplify setup, and means that neither I nor Paula need to put in any of our own cash up front.

The winners play with knowledge of the wheel's behaviour, using strategies which hide this knowledge while still winning more often than pure luck would allow.  Generally this means placing outside bets at random (while taking the wheel's designed-in bias into account) unless the balance falls below a steadily increasing target, in which case there is a random probability (which scales with said deficit) of placing a perfectly predicted bet.  As a safeguard, they will always play perfectly if they're about to run out of money.

The winners' job is to earn money to replace that lost by the losers, and additionally to build up a bankroll (stored in a central account I'll call the "cage") for the high-rollers to use as seed money.  I don't really care whether these accounts earn comps or not - it's entirely probable that they won't, because they keep winning overall, so I'll assume they don't earn anything that way.

The losers, by contrast, play with only partial knowledge of the wheel's quirks, using low stakes.  They know about the dependency on recent history, and will bet accordingly - using inside bets to increase their apparent volatility - but they won't use the perfect prediction ability; their quirk knowledge should still reduce their losses compared to the house edge.  They will steadily lose money, but earn comps in the process.  When they run out of money, they'll go to the "cage" to replenish their stock.  This should give them an unlimited playing streak, as long as the "winners" earn quickly enough to completely offset those losses.

The high-rollers are special; they play using "full complete" bets on one number at a time.  They also aim to break-even in the long run, rather than to earn or lose money steadily.  They also come into play only when the "winner" accounts have collectively earned enough to fund them.  It should be noted that a "full complete" bet doesn't merely win or lose - it will often *partially* win, if one of the neighbour numbers hits instead of the stated target.  This makes detailed modelling of their statistics more complex, but the house edge remains roughly constant, so I expect each high-roller account to earn a lot of comps due to their big bets and seemingly volatile strategy, even though they don't actually lose money in the long run.

And because the high-rollers should be the big earners, I plan to use only 25% of the accounts as losers, 25% as winners, and the remaining 50% as high-rollers.  It'll take a while to seed the high-roller accounts that way, but it avoids having to convert a penny-ante "winner" or "loser" into a completely different type of gambler on the fly.  Eventually, having a large number of high-roller accounts should give a high earning potential - not least since, at the end of this hustle, I can simply drain their balances.

There is a catch, though - seeding a high-roller account is expensive, and unless I give it a very high starting value (taking correspondingly long to start up), there's a significant chance that it'll blow through all that money (at a rate of up to 40 times the table-maximum per spin) before the wheel's RNG is properly figured out.  For that reason, high-roller accounts will play like "winner" accounts (but with larger, table-maximum bets) for the first 64 spins and until their target balance is achieved, before switching to full-complete bets.  If they still run out of money, they'll wait for the minimum donation from the cage that they need to continue playing.

...

The new cheat program relies on the existing server-side code in my earlier roulette entry, which is included for completeness.  It is configurable (at compile-time) in the number of dummy accounts available, the sign-up bonus cash available to each, and the table minimum and maximum bets.  The speed of play (for each account) is also configurable between the normal rate of about one spin per minute (since the Lucky Deuce runs a cute animation of the ball bouncing around the wheel after the bet is placed), and an accelerated rate of one spin per second (for testing and demonstration).  All of the bets, results and money transfers, along with an estimate of comp earnings at 40% of the nominal house edge (for "loser" and "high roller" accounts only), are logged to stdout.

The first dummy account (including if only one is available) will work as a "winner".  The second account will always be a "loser", and if there are three or more, there'll be at least one "high roller", which will remain dormant until enough credit has been earned to allow it to sustain a short losing streak of "full complete" bets.  Hence the dormancy time will depend on the ratio between the minimum and maximum bets.
